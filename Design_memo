#For the undo/redo stack, it is a last in first out. when users perdorm the action, their request is addded to the top of our undo stack. If a user wants to undo the stack, the most recent item is to be removed and moved to the redo stack. In simpler terms the most recent thing you undo us the the first thing you can redo. This is the right choice because it follows the real world, the first thing undone will naturally be the first thing we can redo.
#For the help desk ticket, its the opposite of the undo/redo with a first in first out. People are helped in the order they apply basically. Our enqueue action adds the approaching new customer while our dequeue removes the customers from the front. This allows the customers to be seen in the order they arrive. A queue is better suited for a help desk because it allows for fairness and new people get their chance to wait in line. This shows how a true help desk works in real life. 
#My implementations differ because they are not a strict stack or a strict queue. we use nodes and pointers that allow us to enforce stack and queue functions or true behaviors. Our actions like the push/pop or dequeue and enqueue are limited to work how they are meant to function. It pretty much shows all the under the hood work, our engine. 
